// Generated by CoffeeScript 1.7.1
(function() {
  var MiRest, defaultOpts, error, inheritExtend;

  defaultOpts = {
    url: '',
    verbs: {
      'create': 'POST',
      'read': 'GET',
      'update': 'PUT',
      'destroy': 'DELETE'
    },
    ext: '',
    ajax: {
      dataType: 'json'
    },
    keepAlive: true,
    autoReconect: true,
    auth_callback: void 0,
    auth: {
      header_session: "X-MI-SESSION",
      header_token: "X-MI-TOKEN",
      cookie_session: "x-session",
      cookie_token: "x-token",
      methods: {
        login: "auth/login",
        session: "auth/session",
        revoke: "auth/revoke"
      },
      auto: true
    }
  };

  error = function(msg) {
    throw new Error("ERROR: mi.rest: " + msg);
  };

  inheritExtend = function(a, b) {
    var F;
    F = function() {};
    F.prototype = a;
    return $.extend(true, new F(), b);
  };

  MiRest = (function() {
    function MiRest(opts) {
      this.opts = inheritExtend(defaultOpts, opts);
      this._auth = {
        token: void 0,
        session: void 0,
        lastSessionUpdate: void 0,
        cb_queue: [],
        running: false
      };
      this._auth.token = $.cookie(this.opts.auth.cookie_token);
      this._auth.session = $.cookie(this.opts.auth.cookie_session);
    }

    MiRest.prototype.has_auth = function() {
      return this._auth.session !== void 0;
    };

    MiRest.prototype.refresh_session = function(opts, verb, method) {
      var headers, op, _i, _len, _ref;
      this._auth.cb_queue.push({
        opts: opts,
        verb: verb,
        method: method
      });
      if (!this._auth.running) {
        this._auth.running = true;
        if (!this._auth.token) {
          _ref = this._auth.cb_queue;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            opts = _ref[_i];
            op = opts.opts;
            if (op.fail) {
              op.fail();
            }
            if (op.always) {
              op.always(false);
            }
          }
          this._auth.cb_queue = [];
          this._auth.session = void 0;
          return this._auth.running = false;
        } else {
          headers = {};
          headers[this._auth.header_token] = this._auth.token;
          return $.ajax(this._auth.methods.session + this.opts.ext, {
            cache: false,
            headers: headers,
            type: "GET",
            dataType: "json",
            complete: (function(_this) {
              return function(xhr) {
                var _j, _k, _len1, _len2, _ref1, _ref2;
                if (xhr.status === 200 && xhr.responseJSON && xhr.responseJSON.session_token) {
                  _this._auth.session = xhr.responseJSON.session_token;
                  $.cookie(_this._auth.cookie_session, _this._auth.session, {
                    expires: 30,
                    path: "/"
                  });
                  $.cookie(a_auth.cookie_token, _this._auth.token, {
                    expires: 30,
                    path: "/"
                  });
                  _ref1 = _this._auth.cb_queue;
                  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                    opts = _ref1[_j];
                    if (opts.opts === void 0) {
                      opts.opts = {};
                    }
                    if (opts.method) {
                      opts.opts.noloop = true;
                      _this.call(opts.verb || _this.opts.verbs.read, opts.methid, opts.opts);
                    } else {
                      if (opts.opts.success) {
                        opts.opts.success();
                      }
                      if (opts.opts.always) {
                        opts.opts.always(true);
                      }
                    }
                  }
                } else {
                  _this._auth.token = void 0;
                  _this._auth.session = void 0;
                  $.cookie(_this._auth.cookie_session, "", -1);
                  $.cookie(a_auth.cookie_token, "", -1);
                  _ref2 = _this._auth.cb_queue;
                  for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                    opts = _ref2[_k];
                    if (opts.opts === void 0) {
                      opts.opts = {};
                    }
                    if (opts.opts.fail) {
                      opts.opts.fail(403);
                    }
                    if (opts.opts.always) {
                      opts.opts.always(false, 403);
                    }
                  }
                }
                _this._auth.cb_queue = [];
                return _this._auth.running = false;
              };
            })(this)
          });
        }
      }
    };

    MiRest.prototype.revoke_session = function(callback) {};

    MiRest.prototype.call = function(verb, method, opts) {
      var ajaxOpts, headers, http_method, key, url, val, _ref;
      if (this.opts.verbs[verb] === void 0) {
        error('Verb "' + verb + '" is unknown');
      }
      if (method === '' || method === void 0) {
        error('Method is undefined');
      }
      if (opts === void 0) {
        opts = {};
      }
      if (opts.auth && !this.has_auth()) {
        if (this._auth.token !== void 0) {
          this.refresh_session(opts, verb, method);
        } else {
          if (opts.fail) {
            opts.fail(403);
          }
          if (opts.always) {
            opts.always(false, 403);
          }
        }
        return;
      }
      if (opts.params) {
        _ref = opts.params;
        for (key in _ref) {
          val = _ref[key];
          method = method.replace(":" + key, val);
        }
      }
      headers = {};
      if (this.has_auth()) {
        headers[this._auth.header_session] = this._auth.session;
      }
      http_method = this.opts.verbs[verb];
      ajaxOpts = opts.ajax || {};
      url = this.opts.url + method + this.opts.ext;
      ajaxOpts.type = http_method;
      ajaxOpts.headers = headers;
      if (opts.data) {
        ajaxOpts.data = opts.data;
      }
      ajaxOpts = $.extend(true, {}, this.opts.ajax, ajaxOpts);
      ajaxOpts.complete = (function(_this) {
        return function(xhr, status) {
          var data;
          if (xhr.status === 200) {
            data = xhr.responseJSON;
            if (opts.success) {
              opts.success(data);
            }
            if (opts.always) {
              return opts.always(true, data);
            }
          } else {
            if ((xhr.stauts === 401 || xhr.status === 403) && !opts.noloop) {
              return _this.refresh_session(opts, verb, method);
            } else {
              if (opts.fail) {
                opts.fail(xhr.status);
              }
              if (opts.always) {
                return opts.always(false, xhr.status);
              }
            }
          }
        };
      })(this);
      return $.ajax(url, ajaxOpts);
    };

    MiRest.prototype.create = function(method, opts) {
      return this.call("create", method, opts);
    };

    MiRest.prototype.read = function(method, opts) {
      return this.call("read", method, opts);
    };

    MiRest.prototype.update = function(method, opts) {
      return this.call("update", method, opts);
    };

    MiRest.prototype.destroy = function(method, opts) {
      return this.call("destroy", method, opts);
    };

    return MiRest;

  })();

  window.MiRest = MiRest;

}).call(this);
