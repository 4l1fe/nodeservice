// Generated by CoffeeScript 1.7.1
(function() {
  var Player;

  Player = (function() {
    function Player(player_orig, formats) {
      var i, item, key, playBtnSize, self, volIntegerLevel, _i, _j, _len, _ref;
      this.player_orig = player_orig;
      this.formats = formats;
      self = this;
      this.volumeUpdateTimeout = 130;
      this.elems = {
        player: $('.video-js'),
        controlBar: $(".video-js .vjs-control-bar"),
        quality: {
          bar: $('<div class="vjs-quality-bar"></div>'),
          items: $()
        },
        volume: {
          control: $('.video-js .vjs-volume-control'),
          wrapper: $('<div class="vjs-volume-wrapper">'),
          items: $(),
          cf: $('<div style="clear: both; width: 100%;">')
        },
        fullScreenControl: $('.video-js .vjs-fullscreen-control'),
        duration: $('.video-js .vjs-duration'),
        remaining: $('.video-js .vjs-remaining-time'),
        progress: {
          wrapper: $('<div class="vjs-progress-wrapper">'),
          holder: $('.vjs-progress-holder')
        },
        circlePlayButton: $('<div class="vjs-circle-play-btn">')
      };
      this.resize();
      this.qualityNames = {
        sd: 'LQ',
        hd: 'SQ',
        fullhd: 'HQ'
      };
      _ref = ['sd', 'hd', 'fullhd'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        item = $('<div class="vjs-quality-btn vjs-control">').data('quality', key).text(this.qualityNames[key]).appendTo(this.elems.quality.bar);
        this.elems.quality.items.push(item[0]);
      }
      for (i = _j = 1; _j <= 6; i = ++_j) {
        item = $('<div class="vjs-volume-level">').appendTo(this.elems.volume.wrapper);
        this.elems.volume.items.push(item[0]);
      }
      this.elems.volume.cf.appendTo(this.elems.volume.wrapper);
      this.elems.volume.wrapper.appendTo(this.elems.volume.control);
      this.elems.progress.wrapper.appendTo(this.elems.controlBar);
      this.elems.fullScreenControl.detach().appendTo(this.elems.controlBar);
      this.elems.quality.bar.appendTo(this.elems.controlBar);
      this.elems.volume.control.detach().appendTo(this.elems.controlBar);
      this.elems.duration.detach().appendTo(this.elems.controlBar);
      $(".video-js .vjs-volume-bar").remove();
      this.elems.circlePlayButton.appendTo(this.elems.player).on('click', function() {
        self.play();
        return self.elems.circlePlayButton.hide();
      });
      playBtnSize = this.elems.circlePlayButton.height();
      this.elems.circlePlayButton.css('left', (this.elems.player.width() - playBtnSize) / 2);
      this.elems.circlePlayButton.css('top', (this.elems.player.height() - playBtnSize) / 2);
      this.player_orig.on('playing', function() {
        return self.elems.circlePlayButton.hide();
      });
      $('.video-js .vjs-big-play-button').remove();
      this.elems.volume.wrapper.on("mousedown", function(ev) {
        return self.volUpdateAllowed = true;
      });
      this.elems.volume.wrapper.on("mousemove", function(ev) {
        var el;
        el = $(this);
        return setTimeout(function() {
          if (self.volUpdateAllowed) {
            return self.updateVolumeLevel(ev, el);
          }
        }, self.volumeUpdateTimeout);
      });
      this.elems.volume.wrapper.on("mouseup", function(ev) {
        return self.volUpdateAllowed = false;
      });
      this.elems.volume.wrapper.on("click", function(ev) {
        var el;
        el = $(this);
        return self.updateVolumeLevel(ev, el);
      });
      this.elems.volume.wrapper.on("mouseenter", function(ev) {
        if (ev.which !== 1) {
          return self.volUpdateAllowed = false;
        }
      });
      this.updateQualityBar();
      volIntegerLevel = Math.round(this.player_orig.volume() * this.elems.volume.items.length);
      this.updateVolumeBar(volIntegerLevel);
      $(window).resize((function(_this) {
        return function() {
          return _this.resize();
        };
      })(this));
      this.player_orig.ads();
      this.player_orig.vast({
        url: window.mi_conf.vast.rolls.pre
      });
    }

    Player.prototype.updateVolumeLevel = function(ev, el) {
      var floatLevel, integerLevel, offset, width, wrp_padding, x;
      offset = 4;
      wrp_padding = 12;
      x = ev.pageX - this.elems.volume.wrapper.offset().left - wrp_padding;
      integerLevel = Math.floor((x + offset) / 6);
      this.updateVolumeBar(integerLevel);
      width = this.elems.volume.wrapper.width();
      floatLevel = (x + wrp_padding) / width;
      if (floatLevel > 1) {
        floatLevel = 1;
      }
      if (floatLevel < 0) {
        floatLevel = 0;
      }
      return this.player_orig.volume(floatLevel);
    };

    Player.prototype.updateVolumeBar = function(integerLevel) {
      return $(this.elems.volume.items).each(function(i, el) {
        if (i < integerLevel) {
          return $(el).addClass("is-activated");
        } else {
          return $(el).removeClass("is-activated");
        }
      });
    };

    Player.prototype.getCurrentQuality = function() {
      return this.parseURI(this.player_orig.currentSrc()).fileWOExt;
    };

    Player.prototype.parseURI = function(uriStr) {
      var fileNameSplitted, uri, uriStrSplitted;
      uri = {};
      uri.hierPart = uriStr.split('?')[0];
      uriStrSplitted = uriStr.split('?');
      uri.query = uriStrSplitted.length > 1 ? uriStrSplitted[1].split('#')[0] : void 0;
      uri.fragment = uriStr.split('#')[1];
      uri.file = uri.hierPart.split('/').slice(-1)[0];
      fileNameSplitted = uri.file.split('.');
      if (fileNameSplitted.length > 1) {
        uri.ext = fileNameSplitted.slice(-1)[0];
        uri.fileWOExt = fileNameSplitted.slice(0, -1).join('.');
      } else {
        uri.ext = void 0;
        uri.fileWOExt = uri.file;
      }
      uri.schemeHostPath = uri.hierPart.split('/').slice(0, -1).join('/');
      if (uri.hierPart[uri.schemeHostPath.length] === '/') {
        uri.schemeHostPath += '/';
      }
      return uri;
    };

    Player.prototype.getSourceExt = function() {
      return this.parseURI(this.player_orig.currentSrc()).ext;
    };

    Player.prototype.getSourceDir = function() {
      return this.parseURI(this.player_orig.currentSrc()).schemeHostPath;
    };

    Player.prototype.setQuality = function(qualityTag) {
      var currTime, isPaused, newSrc, self, uri;
      self = this;
      currTime = this.player_orig.currentTime();
      isPaused = this.player_orig.paused();
      if (!isPaused) {
        this.player_orig.pause();
      }
      uri = this.parseURI(this.player_orig.currentSrc());
      newSrc = uri.schemeHostPath + qualityTag + '.' + uri.ext;
      if (uri.query) {
        newSrc += '?' + uri.query;
      }
      if (uri.fragment) {
        newSrc += '#' + uri.fragment;
      }
      this.player_orig.src(newSrc);
      this.player_orig.play();
      return this.player_orig.on('loadedmetadata', function() {
        self.player_orig.currentTime(currTime);
        return self.player_orig.on('canplay', function() {
          if (isPaused) {
            self.player_orig.pause();
          } else {
            self.player_orig.play();
          }
          return self.updateQualityBar();
        });
      });
    };

    Player.prototype.updateQualityBar = function() {
      var qualityTag;
      qualityTag = this.getCurrentQuality();
      return this.elems.quality.items.each(function(i, el) {
        return $(el).toggleClass('is-activated', $(el).data('quality') === qualityTag);
      });
    };

    Player.prototype.play = function() {
      this.player_orig.play();
      return false;
    };

    Player.prototype.pause = function() {
      this.player_orig.pause();
      return false;
    };

    Player.prototype.resize = function() {
      var height, width;
      width = this.elems.player.parent().outerWidth();
      height = this.elems.player.parent().outerHeight();
      return this.player_orig.width(width).height(height);
    };

    return Player;

  })();

  window.Player = Player;

}).call(this);
