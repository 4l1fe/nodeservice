// Generated by CoffeeScript 1.8.0
(function() {
  var Cache;

  Cache = (function() {
    function Cache() {
      this.cached = {};
      this.maintanance = false;
      setInterval(this._maintain.bind(this), 1000);
    }

    Cache.prototype.get = function(name) {
      var el;
      el = this.cached[name];
      if (el !== void 0) {
        return JSON.parse(JSON.stringify(el.val));
      }
      return void 0;
    };

    Cache.prototype.in_cache = function(name) {
      if (this.cached[name] === void 0) {
        return false;
      }
      return true;
    };

    Cache.prototype.put = function(name, value, expired) {
      var dt;
      if (expired == null) {
        expired = void 0;
      }
      this.cached[name] = {
        val: JSON.parse(JSON.stringify(value))
      };
      if (expired !== void 0) {
        dt = new Date();
        dt.setSeconds(dt.getSeconds() + expired);
        return this.cached[name].expired = dt;
      }
    };

    Cache.prototype.remove = function(name) {
      return this.clear(name);
    };

    Cache.prototype.clear = function(name) {
      if (name == null) {
        name = void 0;
      }
      if (name === void 0) {
        return this.cached = [];
      } else {
        return delete this.cached[name];
      }
    };

    Cache.prototype._maintain = function() {
      var el, index, nw, _ref;
      if (this.maintanance) {
        return;
      }
      this.maintanance = true;
      nw = new Date();
      _ref = this.cached;
      for (index in _ref) {
        el = _ref[index];
        if (el.expired !== void 0 && nw > el.expired) {
          delete this.cached[index];
        }
      }
      return this.maintanance = false;
    };

    return Cache;

  })();

  module.exports = Cache;

}).call(this);

//# sourceMappingURL=cache.js.map
