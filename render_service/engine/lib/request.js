// Generated by CoffeeScript 1.7.1
(function() {
  var Request, ua_parser, url,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ua_parser = require('ua-parser');

  url = require('url');

  Request = (function() {
    function Request(req, res) {
      this.req = req;
      this.res = res;
      this.app = global.app;
      this._query_params = void 0;
      this._query_info = void 0;
      this._device_info = void 0;
      this.url_parsed = void 0;
    }

    Request.prototype.parse_url = function() {
      if (this.url_parsed === void 0) {
        this.url_parsed = url.parse(this.req.url, true);
      }
      return this.url_parsed;
    };

    Request.prototype.query_params = function(name) {
      if (name == null) {
        name = void 0;
      }
      if (this._query_params === void 0) {
        this._query_params = this.parse_url().query;
      }
      if (name === void 0) {
        return this._query_params;
      }
      return this._query_params[name];
    };

    Request.prototype.query_info = function(name) {
      if (name == null) {
        name = void 0;
      }
      if (this._query_info === void 0) {
        this._query_info = {
          path: this.parse_url().pathname,
          agent: this.req.headers['user-agent'],
          url: this.req.url,
          headers: this.req.headers,
          ip: this.req.headers['x-forwarded-for'] || this.req.connection.remoteAddress || this.req.socket.remoteAddress || this.req.connection.socket.remoteAddress,
          geo: void 0
        };
      }
      if (name === void 0) {
        return this._query_info;
      }
      return this._query_info[name];
    };

    Request.prototype.device_info = function(name) {
      var browser, dev_family, dev_type, device, os, os_family, user_agent;
      if (name == null) {
        name = void 0;
      }
      if (this._device_info === void 0) {
        user_agent = this.req.headers['user-agent'];
        device = ua_parser.parseDevice(user_agent);
        browser = ua_parser.parseUA(user_agent);
        os = ua_parser.parseOS(user_agent);
        os_family = os.family.toLowerCase();
        dev_family = device.family.toLowerCase();
        dev_type = void 0;
        if (__indexOf.call(this.app.conf.dict_devices.tablets, dev_family) >= 0) {
          dev_type = "tablet";
        } else if (__indexOf.call(this.app.conf.dict_devices.smartphones, dev_family) >= 0) {
          dev_type = "smartphone";
        }
        this._device_info = {
          is_mobile: __indexOf.call(this.app.conf.dict_os.mobile, os_family) >= 0 || /mobile/ig.test(browser.family),
          os: os,
          browser: browser,
          vendor: device.family,
          type: dev_type
        };
        if (this._device_info.is_mobile) {
          this._device_info.browser.type = this._device_info.browser.family.replace(/\s*mobile\s*/i, "");
        } else {
          this._device_info.browser.type = this._device_info.browser.family;
        }
      }
      if (name === void 0) {
        return this._device_info;
      }
      return this._device_info[name];
    };

    Request.prototype.user_is_auth = function() {
      return this.app.api.call('/internal/auth/check', 'get', {}, {});
    };

    Request.prototype.auth_user = function() {
      return false;
    };

    Request.prototype.session = function() {
      return this.app.api.call('/internal/info/session', 'get', {}, {});
    };

    Request.prototype.response = function(code, html) {
      if (html == null) {
        html = void 0;
      }
      this.res.writeHead(code, {
        "Content-Type": "text/html"
      });
      if (html !== void 0) {
        this.res.write(html);
      }
      return this.res.end();
    };

    Request.prototype.response_html = function(html) {
      return this.response(200, html);
    };

    Request.prototype.response_code = function(code, msg) {
      if (msg == null) {
        msg = void 0;
      }
      return this.response(code, msg);
    };

    Request.prototype.redirect = function(url, code) {
      if (code === void 0) {
        code = 302;
      }
      this.res.writeHead(code, {
        "Location": url
      });
      return this.res.end();
    };

    return Request;

  })();

  module.exports = Request;

}).call(this);
